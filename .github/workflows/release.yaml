name: WASudoku Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  prepare:
    name: Prepare environment
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.read_tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v5
      - id: version
        run: echo "version=${GITHUB_REF_NAME#v}" >>"${GITHUB_OUTPUT}"
      - id: read_tag
        run: echo "tag=$(cat .github/VERSION)" >>"${GITHUB_OUTPUT}"

  build-web:
    name: Build web app
    runs-on: ubuntu-latest
    needs: prepare
    container:
      image: h3nc4/wasudoku-ci:${{ needs.prepare.outputs.tag }}
    steps:
      - uses: actions/checkout@v5
      - run: scripts/version.sh "v${{ needs.prepare.outputs.version }}"
      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >>"${GITHUB_OUTPUT}"
      - uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      - run: npm ci
      - run: npm run build
      - name: Package artifact
        run: |
          tar -czvf WASudoku.tar.gz -C dist .
          XZ_OPT=-9e tar -cJf WASudoku.tar.xz -C dist .
      - uses: actions/upload-artifact@v5
        with:
          name: gz-build
          path: WASudoku.tar.gz
          retention-days: 1
      - uses: actions/upload-artifact@v5
        with:
          name: xz-build
          path: WASudoku.tar.xz
          retention-days: 1
      - uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  deploy-pages:
    name: Deploy to GitHub Pages
    needs: build-web
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4

  build-apk:
    name: Build Android APK
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Restore keystore
        run: echo "${{ secrets.ANDROID_KEYSTORE_B64 }}" | base64 --decode >android.keystore
      - name: Add Android licenses
        run: |
          mkdir -p licenses
          echo "8933bad161af4178b1185d1a37fbf41ea5269c55" >>licenses/android-sdk-license
          echo "d56f5187479451eabf01fb78af6dfcb131a6481e" >>licenses/android-sdk-license
          echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" >>licenses/android-sdk-license
          echo "84831b9409646a918e30573bab4c9c91346d8abd" >>licenses/android-sdk-preview-license
      - name: Build APK with Bubblewrap
        run: |
          docker run \
            --rm \
            --entrypoint sh \
            -e "BUBBLEWRAP_KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" \
            -e "BUBBLEWRAP_KEY_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" \
            -e "VERSION=${{ needs.prepare.outputs.version }}" \
            -v "${PWD}:/app" \
            ghcr.io/googlechromelabs/bubblewrap:1.24.1 \
            -c 'printf "%s\n" "${VERSION}" | bubblewrap update && yes | bubblewrap build'
          mv app-release-signed.apk WASudoku.apk
      - uses: actions/upload-artifact@v5
        with:
          name: apk
          path: WASudoku.apk
          retention-days: 1

  release:
    name: Publish GitHub Release
    needs: [build-web, build-apk]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v6
        with:
          name: gz-build
      - uses: actions/download-artifact@v6
        with:
          name: xz-build
      - uses: actions/download-artifact@v6
        with:
          name: apk
      - uses: softprops/action-gh-release@v2
        with:
          files: |
            WASudoku.tar.gz
            WASudoku.tar.xz
            WASudoku.apk
